<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gráfico de Sensor</title>
  <!-- Inclua os arquivos CSS e JavaScript necessários para o Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
  <h1>Gráfico de Sensor</h1>
  <canvas id="sensorChart" width="400" height="200"></canvas>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const ctx = document.getElementById("sensorChart").getContext("2d");
      const data = {
        labels: Array.from({
          length: 24
        }, (_, i) => `${i.toString().padStart(2, "0")}h`),
        datasets: [{
            label: "Temperatura",
            data: [], // Inicialmente vazio
            borderColor: "red",
            backgroundColor: "rgba(255, 0, 0, 0.2)",
          },
          {
            label: "Umidade",
            data: [], // Inicialmente vazio
            borderColor: "blue",
            backgroundColor: "rgba(0, 0, 255, 0.2)",
          },
        ],
      };

      const config = {
        type: "line",
        data: data,
      };

      // Crie o gráfico com dados vazios inicialmente
      const myChart = new Chart(ctx, config);

      function fetchDataAndUpdateChart() {
        // Use XMLHttpRequest ou fetch para buscar dados do servidor
        // Exemplo usando XMLHttpRequest:
        const xhr = new XMLHttpRequest();
        xhr.open("GET", "/selectall", true); // Altere este endereço para o endpoint correto
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              const sensorData = JSON.parse(xhr.responseText);
              updateChart(sensorData);
            } else {
              console.error("Erro ao buscar dados do servidor.");
            }
          }
        };
        xhr.send();
      }

      function updateChart(sensorData) {
        const formattedData = sensorData.map((sensor) => {
          const date = new Date(sensor.createdAt);
          const hour = date.getHours();
          return {
            hour,
            temperatura: sensor.temperatura,
            umidade: sensor.umidade
          };
        });

        // Atualize os dados do gráfico
        myChart.data.datasets[0].data = formattedData.map(entry => entry.temperatura);
        myChart.data.datasets[1].data = formattedData.map(entry => entry.umidade);

        // Atualize o rótulo do tempo (opcional, dependendo do seu caso de uso)
        myChart.data.labels = formattedData.map(entry => entry.hour + 'h');

        // Atualize o gráfico
        myChart.update();
      }

      // Atualizar os dados do gráfico a cada hora
      fetchDataAndUpdateChart(); // Chame a função para buscar e exibir os dados inicialmente
      setInterval(fetchDataAndUpdateChart, 3600000); // 1 hora = 3600000 milissegundos
    });
  </script>
</body>

</html>
